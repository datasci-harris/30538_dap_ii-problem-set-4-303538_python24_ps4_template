{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Your Title\"\n",
        "format: \n",
        "  pdf:\n",
        "    keep-tex: true\n",
        "    include-in-header: \n",
        "       text: |\n",
        "         \\usepackage{fvextra}\n",
        "         \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n",
        "include-before-body:\n",
        "  text: |\n",
        "    \\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n",
        "      showspaces = false,\n",
        "      showtabs = false,\n",
        "      breaksymbolleft={},\n",
        "      breaklines\n",
        "    }\n",
        "---\n",
        "\n",
        "\n",
        "**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. \n",
        "\n",
        "## Style Points (10 pts)\n",
        "\n",
        "\n",
        "## Submission Steps (10 pts)\n",
        "1. This problem set is a paired problem set.\n",
        "2. Play paper, scissors, rock to determine who goes first. Call that person Partner 1.\n",
        "• Partner 1 (name and cnet ID): Alejandra Silva - aosilva\n",
        "• Partner 2 (name and cnet ID): Guillermina Marto - gmarto\n",
        "3. Partner 1 will accept the ps4 and then share the link it creates with their partner.\n",
        "You can only share it with one partner so you will not be able to change it after your\n",
        "partner has accepted.\n",
        "4. “This submission is our work alone and complies with the 30538 integrity policy.” Add\n",
        "your initials to indicate your agreement: **__** **GM**\n",
        "5. “I have uploaded the names of anyone else other than my partner and I worked with\n",
        "on the problem set here” (1 point)\n",
        "6. Late coins used this pset: **__** Late coins left after submission: **__**\n",
        "7. Knit your ps4.qmd to an PDF file to make ps4.pdf,\n",
        "• The PDF should not be more than 25 pages. Use head() and re-size figures when\n",
        "appropriate.\n",
        "8. (Partner 1): push ps4.qmd and ps4.pdf to your github repo.\n",
        "9. (Partner 1): submit ps4.pdf via Gradescope. Add your partner on Gradescope.\n",
        "10. (Partner 1): tag your submission in Gradescope\n",
        "\n",
        "\n",
        "## Download and explore the Provider of Services (POS) file (10 pts)\n",
        "\n",
        "1. \n"
      ],
      "id": "a88d2040"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import altair as alt\n",
        "\n",
        "base_url = \"https://data.cms.gov/data-api/v1/dataset/{uuid}/data\"\n",
        "uuid = \"96ba2257-2080-49c1-9e5b-7726f9f83cad\"\n",
        "\n",
        "columns = [\n",
        "    \"PRVDR_CTGRY_CD\",        # Provider Category Code\n",
        "    \"PRVDR_CTGRY_SBTYP_CD\",  # Provider Subtype Code\n",
        "    \"PRVDR_NUM\",             # CMS Certification Number\n",
        "    \"PGM_TRMNTN_CD\",         # Termination Code\n",
        "    \"FAC_NAME\",              # Facility Name\n",
        "    \"ZIP_CD\",                # ZIP Code\n",
        "    \"STATE_CD\"               # State Abbreviation\n",
        "]\n",
        "\n",
        "columns_param = \",\".join(columns)\n",
        "\n",
        "offset = 0\n",
        "limit = 5000  #  API allows size to be set to 5000\n",
        "\n",
        "all_data = []\n",
        "\n",
        "while True:\n",
        "    params = {\n",
        "\n",
        "        \"column\": columns_param,\n",
        "        \"size\": limit,\n",
        "        \"offset\": offset\n",
        "    }\n",
        "\n",
        "    url = base_url.format(uuid=uuid)\n",
        "    response = requests.get(url, params=params)\n",
        "\n",
        "    if response.status_code != 200:\n",
        "        print(f\"Error: {response.status_code}, {response.text}\")\n",
        "        break\n",
        "\n",
        "    data = response.json()\n",
        "\n",
        "    if not data:\n",
        "        print(\"No more data available.\")\n",
        "        break\n",
        "\n",
        "    all_data.extend(data)\n",
        "\n",
        "    offset += limit\n",
        "    print(f\"Fetched {len(data)} rows, moving to next batch...\")\n",
        "\n",
        "df = pd.DataFrame(all_data)\n",
        "\n",
        "\n",
        "df.to_csv(\"pos2016.csv\", index=False)\n"
      ],
      "id": "d690f6ae",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "2. "
      ],
      "id": "b878149d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df = pd.read_csv(\"pos2016.csv\")\n",
        "\n",
        "\n",
        "df_st_hospitals = df[\n",
        "    (df[\"PRVDR_CTGRY_CD\"] == 1) & \n",
        "    (df[\"PRVDR_CTGRY_SBTYP_CD\"] == 1)\n",
        "]\n",
        "\n",
        "num_hospitals = df_st_hospitals.shape[0]\n",
        "print(f\"Number of short-term hospitals reported in the data: {num_hospitals}\")\n",
        "\n",
        "print(df_st_hospitals)"
      ],
      "id": "c7889aeb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The number of short-term hospitals reported in the dataset for Q4 2016 is 7,245.\n",
        "\n",
        "According to the American Hospital Association (AHA) Annual Survey, the estimated number of short-term hospitals is 4,500–5,000. Similarly, the CMS Hospital Compare dataset indicates around 4,800 hospitals.\n",
        "\n",
        "The discrepancy could be due to the narrower definition used in our dataset and the timing of data collection, which only includes hospitals in Q4 2016. Additionally, the CMS dataset might not include hospitals that do not participate in Medicare or Medicaid, which could lead to lower numbers.\n",
        "\n",
        "3. \n"
      ],
      "id": "488725a9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "uuid_dict = {\n",
        "    \"2016Q4\": \"96ba2257-2080-49c1-9e5b-7726f9f83cad\",\n",
        "    \"2017Q4\": \"d338dc0d-641c-486a-b586-88a662f36963\",\n",
        "    \"2018Q4\": \"4ff7fcfb-2a40-4f76-875d-a4ac2aec268e\",\n",
        "    \"2019Q4\": \"03cca0cc-13a0-4b8d-82c4-57185b6bbfbd\"\n",
        "}\n",
        "\n",
        "columns = [\n",
        "    \"PRVDR_CTGRY_CD\",        # Provider Category Code\n",
        "    \"PRVDR_CTGRY_SBTYP_CD\",  # Provider Subtype Code\n",
        "    \"PRVDR_NUM\",             # CMS Certification Number\n",
        "    \"PGM_TRMNTN_CD\",         # Termination Code\n",
        "    \"FAC_NAME\",              # Facility Name\n",
        "    \"ZIP_CD\",                # ZIP Code\n",
        "    \"STATE_CD\"               # State Abbreviation\n",
        "]\n",
        "\n",
        "columns_param = \",\".join(columns)\n",
        "\n",
        "combined_data = []\n",
        "\n",
        "for year_quarter, uuid in uuid_dict.items():\n",
        "    offset = 0\n",
        "    limit = 5000  \n",
        "    all_data = []\n",
        "\n",
        "    print(f\"Fetching data for {year_quarter}...\")\n",
        "\n",
        "    while True:\n",
        "        params = {\n",
        "            \"column\": columns_param,\n",
        "            \"size\": limit,\n",
        "            \"offset\": offset\n",
        "        }\n",
        "\n",
        "        url = f\"https://data.cms.gov/data-api/v1/dataset/{uuid}/data\"\n",
        "        response = requests.get(url, params=params)\n",
        "\n",
        "        if response.status_code != 200:\n",
        "            print(f\"Error: {response.status_code}, {response.text}\")\n",
        "            break\n",
        "\n",
        "        data = response.json()\n",
        "\n",
        "        if not data:\n",
        "            print(\"No more data available.\")\n",
        "            break\n",
        "\n",
        "        all_data.extend(data)\n",
        "\n",
        "        offset += limit\n",
        "        print(f\"Fetched {len(data)} rows for {year_quarter}, moving to next batch...\")\n",
        "\n",
        "    year_data = pd.DataFrame(all_data)\n",
        "    year_data[\"Year\"] = year_quarter[:4]\n",
        "\n",
        "    # filtro por las condiciones\n",
        "    year_data = year_data[\n",
        "    (year_data[\"PRVDR_CTGRY_CD\"] == \"01\") & \n",
        "    (year_data[\"PRVDR_CTGRY_SBTYP_CD\"] == \"01\")\n",
        "]  \n",
        "\n",
        "    combined_data.append(year_data)\n",
        "\n",
        "combined_df = pd.concat(combined_data, axis=0)\n",
        "\n",
        "combined_df.to_csv(\"combined_data.csv\", index=False)\n",
        "\n",
        "print(f\"Total records retrieved across all years: {combined_df.shape[0]}\")"
      ],
      "id": "0bee2cc4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import altair as alt\n",
        "\n",
        "# Plotting Number of Observations Per Year\n",
        "\n",
        "combined_year_df = combined_df.groupby(\"Year\").size().reset_index(name=\"Number of Observations\")\n",
        "\n",
        "obs_chart = alt.Chart(combined_year_df).mark_bar().encode(\n",
        "    x=alt.X(\"Year:O\", title=\"Year\"),  \n",
        "    y=alt.Y(\"Number of Observations:Q\", title=\"Number of Observations\"),\n",
        "    tooltip=[\"Year\", \"Number of Observations\"]\n",
        ").properties(\n",
        "    title=\"Number of Observations Per Year\"\n",
        ")\n",
        "\n",
        "obs_chart.display()\n",
        "\n",
        "\n",
        "# Plotting Number of Unique Hospitals Per Year\n",
        "unique_hospitals = combined_df.groupby(\"Year\")[\"PRVDR_NUM\"].nunique().reset_index(name=\"Number of Unique Hospitals\")\n",
        "\n",
        "unique_hospitals_chart = alt.Chart(unique_hospitals).mark_bar().encode(\n",
        "    x=alt.X(\"Year:O\", title=\"Year\"), \n",
        "    y=alt.Y(\"Number of Unique Hospitals:Q\", title=\"Number of Unique Hospitals\"),\n",
        "    tooltip=[\"Year\", \"Number of Unique Hospitals\"]\n",
        ").properties(\n",
        "    title=\"Number of Unique Hospitals Per Year\"\n",
        ")\n",
        "\n",
        "unique_hospitals_chart.display()\n",
        "\n",
        "\n",
        "#print(\"Observations Per Year:\")\n",
        "#print(observations_per_year)\n",
        "#print(\"\\nUnique Hospitals Per Year:\")\n",
        "#print(unique_hospitals_per_year)\n",
        "\n",
        "# Compare the two plots to understand the structure of the data.\n",
        "# Observations per year may be higher due to multiple records for the same hospital.\n",
        "# Unique hospitals per year give an idea of how many distinct hospitals are in the dataset for each year."
      ],
      "id": "1049c70e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "4. \n",
        "    a.\n",
        "    b.\n",
        "\n",
        "## Identify hospital closures in POS file (15 pts) (*)\n",
        "\n",
        "1. Termination code equal to 00=ACTIVE PROVIDER. The data contain only up to the code 07. The other codes apply to CLIA. \n"
      ],
      "id": "2fe588de"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "combined_df[\"PGM_TRMNTN_CD\"] = combined_df[\"PGM_TRMNTN_CD\"].astype(str)\n",
        "\n",
        "inactive_codes = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"]\n",
        "\n",
        "active_2016 = combined_df[(combined_df[\"Year\"] == \"2016\") & (combined_df[\"PGM_TRMNTN_CD\"] == \"00\")]\n",
        "\n",
        "print(active_2016.head())\n",
        "\n",
        "suspected_closures = []\n",
        "\n",
        "for idx, hospital in active_2016.iterrows():\n",
        "    provider_num = hospital[\"PRVDR_NUM\"]\n",
        "    facility_name = hospital[\"FAC_NAME\"]\n",
        "    zip_code = hospital[\"ZIP_CD\"]\n",
        "    \n",
        "    for year in [\"2017\", \"2018\", \"2019\"]:\n",
        "        yearly_data = combined_df[(combined_df[\"PRVDR_NUM\"] == provider_num) & (combined_df[\"Year\"] == year)]\n",
        "        \n",
        "        if yearly_data.empty or yearly_data[\"PGM_TRMNTN_CD\"].isin(inactive_codes).any():\n",
        "            suspected_closures.append({\n",
        "                \"Provider Number\": provider_num,\n",
        "                \"Facility Name\": facility_name,\n",
        "                \"ZIP Code\": zip_code,\n",
        "                \"Year Closed\": year\n",
        "            })\n",
        "            break  \n",
        "\n",
        "suspected_closures_df = pd.DataFrame(suspected_closures)\n",
        "num_closures = len(suspected_closures_df)\n",
        "\n",
        "display(f\"Total suspected hospital closures: {num_closures}\")\n",
        "display(suspected_closures_df.head()) \n"
      ],
      "id": "86050fd8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "2. \n"
      ],
      "id": "b10685d8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "sorted_closures = suspected_closures_df.sort_values(by=\"Facility Name\")\n",
        "\n",
        "top_10_closures = sorted_closures[[\"Facility Name\", \"Year Closed\"]].head(10)\n",
        "\n",
        "display(top_10_closures)"
      ],
      "id": "846bb102",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "3. \n"
      ],
      "id": "4ccce6bc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "combined_df[\"Year\"] = combined_df[\"Year\"].astype(int) # Ensure the Year column is properly converted to integer\n",
        "combined_df[\"ZIP_CD\"] = combined_df[\"ZIP_CD\"].astype(str)  # ZIP code as string\n",
        "\n",
        "# Check the data types to confirm they are as expected\n",
        "print(combined_df.dtypes)  # This should show Year as int and ZIP_CD as object (string)\n",
        "\n",
        "# Initialize list to store true closures\n",
        "true_closures = []\n",
        "\n",
        "# Loop through each suspected closure\n",
        "for idx, row in suspected_closures_df.iterrows():\n",
        "    provider_num = row[\"Provider Number\"]\n",
        "    zip_code = str(row[\"ZIP Code\"])  # Convert ZIP code to string\n",
        "    year_closed = int(row[\"Year Closed\"])  # Ensure closure year is an integer\n",
        "    \n",
        "    # Count active hospitals in the closure year and the year after\n",
        "    active_in_year = combined_df[(combined_df[\"ZIP_CD\"] == zip_code) & \n",
        "                                 (combined_df[\"Year\"] == year_closed) & \n",
        "                                 (combined_df[\"PGM_TRMNTN_CD\"] == \"00\")].shape[0]\n",
        "    \n",
        "    active_in_next_year = combined_df[(combined_df[\"ZIP_CD\"] == zip_code) & \n",
        "                                      (combined_df[\"Year\"] == (year_closed + 1)) & \n",
        "                                      (combined_df[\"PGM_TRMNTN_CD\"] == \"00\")].shape[0]\n",
        "    \n",
        "    # Keep closure if the number of active hospitals decreases\n",
        "    if active_in_next_year < active_in_year:\n",
        "        true_closures.append(row)\n",
        "\n",
        "# Convert true closures to DataFrame\n",
        "true_closures_df = pd.DataFrame(true_closures)\n",
        "num_true_closures = len(true_closures_df)\n",
        "\n",
        "display(f\"Total true hospital closures: {num_true_closures}\")\n",
        "display(true_closures_df) "
      ],
      "id": "359072c5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# a) Calculate the number of hospitals fitting the potential merger/acquisition definition\n",
        "num_potential_mergers = len(suspected_closures_df) - len(true_closures_df)\n",
        "\n",
        "# b) Calculate the number of hospitals left after correcting for mergers/acquisitions\n",
        "num_corrected_closures = len(true_closures_df)\n",
        "\n",
        "# c) Sort the corrected list of closures by name and display the first 10 rows\n",
        "corrected_closures_sorted = true_closures_df.sort_values(by=\"Facility Name\").head(10)\n",
        "\n",
        "# Display results\n",
        "print(f\"Number of potential mergers/acquisitions: {num_potential_mergers}\")\n",
        "print(f\"Number of corrected closures: {num_corrected_closures}\")\n",
        "print(\"Corrected closures sorted by Facility Name:\")\n",
        "print(corrected_closures_sorted)"
      ],
      "id": "544dc4ca",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "    a.\n",
        "    b.\n",
        "    c.\n",
        "\n",
        "## Download Census zip code shapefile (10 pt) \n",
        "\n",
        "1. \n",
        "    a.\n",
        "    b. \n",
        "2. \n",
        "\n",
        "## Calculate zip code’s distance to the nearest hospital (20 pts) (*)\n",
        "\n",
        "1. \n"
      ],
      "id": "e7cac73c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import geopandas as gpd"
      ],
      "id": "dff7a77e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "2. \n",
        "3. \n",
        "4. \n",
        "    a.\n",
        "    b.\n",
        "    c.\n",
        "5. \n",
        "    a.\n",
        "    b.\n",
        "    c.\n",
        "    \n",
        "## Effects of closures on access in Texas (15 pts)\n",
        "\n",
        "1. \n",
        "2. \n",
        "3. \n",
        "4. \n",
        "\n",
        "## Reflecting on the exercise (10 pts) "
      ],
      "id": "f4c3af54"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}